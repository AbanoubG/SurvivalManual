apply plugin: 'com.android.application'
apply plugin: 'spoon'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.mobilej.unmock'
apply plugin: 'com.github.ben-manes.versions'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "org.ligi.survivalmanual"

        minSdkVersion 10

        targetSdkVersion 25
        versionCode 35
        versionName "3.5"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        archivesBaseName = "SurvivalManual-$versionName"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "build", "fire", "store"

    productFlavors {
        dev {
            dimension "build"
            minSdkVersion 21
        }

        prod {
            dimension "build"
        }

        forFDroid {
            dimension "store"
            buildConfigField 'String', 'STORE', '"fdroid"'
        }

        forAmazon {
            dimension "store"
            buildConfigField 'String', 'STORE', '"amazon"'
        }

        forPlay {
            dimension "store"
            buildConfigField 'String', 'STORE', '"play"'
        }

        withFirebase {
            dimension "fire"
        }

        noFirebase {
            dimension "fire"
        }


    }

    android.variantFilter { variant ->
        def build = variant.getFlavors().get(0).name
        def firebase = variant.getFlavors().get(1).name
        def store = variant.getFlavors().get(2).name

        def isRelease = variant.buildType.name == 'release'
        def isDebug = variant.buildType.name == 'debug'

        if ((project.hasProperty("singleFlavor") && (store != 'forPlay') && (build != 'prod'))
                || ((store == 'forAmazon' || store == 'forPlay') && firebase == 'noFirebase')
                || (store == 'forFDroid' && firebase != 'noFirebase')
                || (build == 'prod' && isDebug)
                || (build == 'dev' && isRelease)) {
            variant.setIgnore(true)
        }
    }

    packagingOptions {
        // needed for assertJ
        exclude 'asm-license.txt'
        exclude 'LICENSE'
        exclude 'NOTICE'

        // hack for instrumentation testing :-(
        exclude 'LICENSE.txt'

        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    // ugly but the best workaround I found for getting the permission for spoon screenshot writing to SD-Card
    // http://stackoverflow.com/questions/25276537/how-do-i-change-android-permission-settings-when-running-tests
    sourceSets {
        debug {
            manifest.srcFile 'src/androidTest/AndroidManifest.xml'
        }
    }

    lintOptions {
        warning 'InvalidPackage'
        warning 'MissingTranslation'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support:design:$support_version"
    compile "com.android.support:preference-v7:$support_version"

    compile "com.chibatching.kotpref:kotpref:2.1.1"
    compile "com.chibatching.kotpref:initializer:2.1.1"

    compile "com.android.support:cardview-v7:$support_version"

    compile('com.github.ligi:intellij-markdown:android_via_jitpack')

    compile 'com.github.ligi:TouchImageView:2.1'
    compile "com.github.ligi:ExtraCompats:0.4"

    forPlayCompile 'com.github.ligi.snackengage:snackengage-playrate:0.10'
    forFDroidCompile 'com.github.ligi.snackengage:snackengage-playrate:0.10'
    forAmazonCompile 'com.github.ligi.snackengage:snackengage-amazonrate:0.10'

    compile 'com.github.ligi:KAXT:0.16'

    compile 'com.github.hotchemi:permissionsdispatcher:2.3.2'
    kapt 'com.github.hotchemi:permissionsdispatcher-processor:2.3.2'

    androidTestCompile "com.android.support:support-annotations:$support_version"
    androidTestCompile "com.android.support:appcompat-v7:$support_version"
    androidTestCompile "com.android.support:design:$support_version"

    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.2') {
        // http://stackoverflow.com/questions/30578243/why-would-adding-espresso-contrib-cause-an-inflateexception
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }

    androidTestCompile 'com.github.ligi:trulesk:0.18'
    androidTestCompile 'com.squareup.assertj:assertj-android:1.1.1'
    androidTestCompile 'org.mockito:mockito-core:2.7.19'
    androidTestCompile 'com.linkedin.dexmaker:dexmaker-mockito:2.2.0'

    testCompile 'junit:junit:4.12'
    testCompile 'com.squareup.assertj:assertj-android:1.1.1'
    testCompile "com.android.support:support-annotations:$support_version"

    withFirebaseCompile "com.google.firebase:firebase-core:$firebase_version"
    withFirebaseCompile "com.google.firebase:firebase-crash:$firebase_version"
}

if (hasProperty("gms")) {
    apply plugin: 'com.google.gms.google-services'
}

spoon {
    debug = true
    grantAllPermissions = true
}

